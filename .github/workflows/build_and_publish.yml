name: build-and-publish

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  BIN_DIR: aur        # Поменяйте на вашу папку с PKGBUILD для бинаря, если не в корне
  AUR_DIR: aur

jobs:
  build-bin:
    runs-on: ubuntu-latest
    container: archlinux:base
    outputs:
      sha: ${{ steps.vars.outputs.sha }}
      ver: ${{ steps.vars.outputs.ver }}
      rel: ${{ steps.vars.outputs.rel }}

    steps:
      - name: Prepare pacman keyring
        run: |
          pacman -Sy --noconfirm archlinux-keyring gnupg
          pacman-key --init
          pacman-key --populate archlinux

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: pacman -Syu --noconfirm base-devel git sudo

      - name: Create unprivileged builder
        run: |
          useradd -m builder
          echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
          chown -R builder:builder .

      - name: Patch PKGBUILD with current commit sha
        run: |
          cd ${{ env.BIN_DIR }}
          sed -i "s|<COMMIT>|${{ github.sha }}|g" PKGBUILD
          sudo -u builder makepkg --printsrcinfo > .SRCINFO

  deploy-aur-package:
    needs: build-bin
    runs-on: ubuntu-latest
    container: archlinux:base

    steps:
      - name: Prepare pacman keyring
        run: |
          pacman -Sy --noconfirm archlinux-keyring gnupg
          pacman-key --init
          pacman-key --populate archlinux

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install auxiliary tools
        run: pacman -Syu --noconfirm git base-devel openssh sudo

      - name: Create unprivileged builder
        run: |
          useradd -m builder
          echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
          chown -R builder:builder .

      - name: Setup SSH for AUR
        run: |
          mkdir -p /home/builder/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > /home/builder/.ssh/id_rsa
          chmod 600 /home/builder/.ssh/id_rsa
          echo "Host aur.archlinux.org" >> /home/builder/.ssh/config
          echo "  HostName aur.archlinux.org" >> /home/builder/.ssh/config
          echo "  User aur" >> /home/builder/.ssh/config
          echo "  IdentityFile ~/.ssh/id_rsa" >> /home/builder/.ssh/config
          echo "  StrictHostKeyChecking no" >> /home/builder/.ssh/config
          chown -R builder:builder /home/builder/.ssh

      - name: Update PKGBUILD version
        run: |
          cd deploy_aur
          # Get latest release tag
          LATEST_TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.0.0"
          fi
          VERSION=${LATEST_TAG#v}
          
          # Update PKGBUILD
          sed -i "s/pkgver=.*/pkgver=${VERSION}/" PKGBUILD
          
          # Generate .SRCINFO
          sudo -u builder makepkg --printsrcinfo > .SRCINFO

      - name: Clone AUR repository
        run: |
          sudo -u builder git clone ssh://aur@aur.archlinux.org/perplexity.git aur_repo || true
          if [ ! -d "aur_repo" ]; then
            sudo -u builder mkdir aur_repo
            cd aur_repo
            sudo -u builder git init
            sudo -u builder git remote add origin ssh://aur@aur.archlinux.org/perplexity.git
          fi

      - name: Update AUR package
        run: |
          cd aur_repo
          cp ../deploy_aur/PKGBUILD .
          cp ../deploy_aur/.SRCINFO .
          
          sudo -u builder git config user.name "GitHub Actions"
          sudo -u builder git config user.email "actions@github.com"
          
          sudo -u builder git add PKGBUILD .SRCINFO
          sudo -u builder git commit -m "Update to version from release ${{ needs.build-bin.outputs.sha }}" || true
          sudo -u builder git push origin master || sudo -u builder git push origin main

      - name: Build package (.pkg.tar.zst)
        run: |
          cd ${{ env.BIN_DIR }}
          sudo -u builder makepkg --syncdeps --clean --cleanbuild --noconfirm --force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: arch-bin
          path: ${{ env.BIN_DIR }}/*.pkg.tar.zst

      - name: Create GitHub release with package
        uses: softprops/action-gh-release@v2
        with:
          tag_name: binary-${{ github.sha }}
          name: Binary Release ${{ github.sha }}
          draft: false
          prerelease: false
          files: ${{ env.BIN_DIR }}/*.pkg.tar.zst
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Export vars for downstream job
        id: vars
        run: |
          echo "sha=${GITHUB_SHA}"                               >> $GITHUB_OUTPUT
          echo "ver=$(grep '^pkgver=' ${{ env.BIN_DIR }}/PKGBUILD | cut -d= -f2)" >> $GITHUB_OUTPUT
          echo "rel=$(grep '^pkgrel=' ${{ env.BIN_DIR }}/PKGBUILD | cut -d= -f2)" >> $GITHUB_OUTPUT

  deploy-aur:
    needs: build-bin
    runs-on: ubuntu-latest
    container: archlinux:base

    steps:
      - name: Prepare pacman keyring
        run: |
          pacman -Sy --noconfirm archlinux-keyring gnupg
          pacman-key --init
          pacman-key --populate archlinux

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install auxiliary tools
        run: pacman -Syu --noconfirm git base-devel libarchive sudo

      - name: Create unprivileged builder
        run: |
          useradd -m builder
          echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
          chown -R builder:builder .

      - name: Patch PKGBUILD with current commit sha
        run: |
          cd ${{ env.AUR_DIR }}
          sed -i "s|<COMMIT>|${{ github.sha }}|g" PKGBUILD
          sudo -u builder makepkg --printsrcinfo > .SRCINFO
